---
version: 2.1

orbs:
  terraform: twdps/terraform@0.4.0
  kube: twdps/kube-ops@dev:latest

# ==== global pipeline parameters

parameters:
  terraform-version:
    description: terraform version for all jobs
    type: string
    default: "1.1.2"
  context:
    description: circleci context for all jobs
    type: string
    default: twdps-core-labs-team
  shell-options:
    description: shell options for all jobs
    type: string
    default: secrethub run --env-file secrethub.nonprod.env -- /bin/bash -eo pipefail
  executor-image:
    description: image to use for terraform runs
    type: string
    default: twdps/circleci-kube-ops:alpine-1.3.0

# git push: deploy sandbox
on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    only: /.*-taint$/

# git tag: release to preview cluster
on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        type: string
        default: ""
    steps:
      - run:
          name: set ~/.terraformrc
          command: secrethub inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.cluster >> environment variables
          command: |
            secrethub inject -i environments/<< parameters.cluster >>.auto.tfvars.json.tpl -o << parameters.cluster >>.auto.tfvars.json
  
  set-kubeconfig:
    parameters:
      cluster:
        description: cluster name to use for configuration
        type: string
        default: ""
    steps:
      - run:
          name: setup kubeconfig and deploy core services
          command: |
            mkdir -p ~/.kube
            SECRETHUB_VAR_ENV=<< parameters.cluster >> secrethub inject -i tpl/kubeconfig.tpl -o ~/.kube/config
            
  taint-node-group:
    description: apply node taint for automatic lastest eks-optimized-al2 managed node ami updates
    parameters:
      node-group:
        type: string
        default: ""
    steps:
      - run:
          name: set terraform taint on managed node group to cause new node template with latest ami version
          command: terraform taint "module.eks.module.node_groups.aws_eks_node_group.workers[\"<< parameters.node-group >>\"]"

  store-system-credentials:
    parameters:
      cluster:
        type: string
        default: ''
    steps:
      - run:
          name: write cluster oidc-assume-role kubeconfig
          command: bash scripts/write_cluster_credentials.sh << parameters.cluster >>
    
jobs:

  validate-eks:
    parameters:
      cluster:
        description: cluster being validated
        type: string
        default: ""
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << pipeline.parameters.shell-options >>
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: sandbox
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: test eks configuration
          environment:
            TEST_ENV: << parameters.cluster >>
          command: bash scripts/cluster_configuration_tests.sh << parameters.cluster >>
      - run:
          name: run CIS EKS benchmarks
          command: bash scripts/kube_bench.sh << parameters.cluster >>
 
workflows:
  version: 2

  lab-platform-eks-pipeline:
    jobs:

      - terraform/plan:
          name: sandbox-change-plan
          context: << pipeline.parameters.context >>
          shell: << pipeline.parameters.shell-options >>
          workspace: sandbox
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: sandbox
          filters: *on-push-main

      - approve-sandbox-changes:
          type: approval
          requires:
            - sandbox-change-plan
          filters: *on-push-main

      - terraform/apply:
          name: apply-sandbox-changes
          context: << pipeline.parameters.context >>
          shell: << pipeline.parameters.shell-options >>
          workspace: sandbox
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: sandbox
          after-terraform-init:
            - taint-node-group:
                node-group: group_a
          after-terraform:
            - store-system-credentials:
                cluster: sandbox
          requires:
            - approve-sandbox-changes
          filters: *on-push-main

      - validate-eks:
          name: validate-sandbox-cluster
          context: << pipeline.parameters.context >>
          cluster: sandbox
          # requires:
          #   - apply-sandbox-changes
          filters: *on-push-main
