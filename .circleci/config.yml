---
version: 2.1

orbs:
  terraform: twdps/terraform@0.4.0
  kube: twdps/kube-ops@dev:latest

# ==== global pipeline parameters

parameters:
  terraform-version:
    description: terraform version for all jobs
    type: string
    default: "1.0.7"
  context:
    description: circleci context for all jobs
    type: string
    default: twdps-core-labs-team
  shell-options:
    description: shell options for all jobs
    type: string
    default: secrethub run --env-file secrethub.nonprod.env -- /bin/bash -eo pipefail

# git push: deploy sandbox, also run sandbox deploy on taint-tag
on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    only: /.*-taint$/

# git tag: release to preview cluster
on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        type: string
        default: ""
    steps:
      - run:
          name: set ~/.terraformrc
          command: secrethub inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.cluster >> environment variables
          command: |
            secrethub inject -i environments/<< parameters.cluster >>.auto.tfvars.json.tpl -o << parameters.cluster >>.auto.tfvars.json

  set-kubeconfig:
    parameters:
      cluster:
        description: cluster name to use for configuration
        type: string
        default: ""
    steps:
      - run:
          name: setup kubeconfig and deploy core services
          command: |
            mkdir -p ~/.kube
            SECRETHUB_VAR_ENV=<< parameters.cluster >> secrethub inject -i tpl/kubeconfig.tpl -o ~/.kube/config
  
  check-taint:
    description: evaluate and apply node taint for updates
    parameters:
      node-group:
        type: string
        default: ""
      plan-or-apply:
        description: is this a terraform plan or apply phase?
        type: string
        default: "plan"
    steps:
      - run:
          name: Schedule for terraform taint if -taint in tag
          command: bash scripts/taint_node_groups.sh << parameters.node-group >> << parameters.plan-or-apply >>

  store-system-credentials:
    parameters:
      cluster:
        type: string
        default: ''
    steps:
      - run:
          name: write cluster oidc-assume-role kubeconfig
          command: bash scripts/write_cluster_credentials.sh << parameters.cluster >>

  smoke-test-core-services:
    parameters:
      cluster:
        type: string
        default: ''
      sonobuoy-mode:
        description: sonobuoy conformance test mode; default is quick
        type: string
        default: quick
    steps:
      - run:
          name: validate core service health
          command: bats test
      - run:
          name: cis benchmarks
          command: bash scripts/kube_bench.sh << parameters.cluster >>
      - run:
          name: conformance smoke-test
          command: bash scripts/sonobuoy_conformance_test.sh << parameters.cluster >> << parameters.sonobuoy-mode >>
    

jobs:
  validate-eks:
    parameters:
      cluster:
        description: cluster being validated
        type: string
        default: ""
    docker:
      - image: twdps/circleci-infra-aws:alpine-1.0.2
    shell: << pipeline.parameters.shell-options >>
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: sandbox
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: test eks configuration
          environment:
            TEST_ENV: << parameters.cluster >>
          command: bash scripts/cluster_configuration_tests.sh << parameters.cluster >>
 
  deploy-core-services:
    docker:
      - image: twdps/circleci-kube-ops:alpine-stable
    shell: << pipeline.parameters.shell-options >>
    parameters:
      cluster:
        description: cluster name to use for configuration
        type: string
        default: ""
    steps:
      - checkout
      - setup_remote_docker
      - set-kubeconfig:
          cluster: sandbox
      - kube/packages:
          kubectl-version: "v1.22.1"
          helm-version: latest
      - run:
          name: deploy standard, non-istio administrative namespaces
          command: kubectl apply -f standard-namespaces.yaml
      - run:
          name: deploy metrics apis
          command: kubectl apply -f metrics-apis --recursive
      - run:
          name: deploy cluster-autoscaler
          command: bash scripts/deploy_cluster_autoscaler.sh << parameters.cluster >>
      - run:
          name: deploy containter-insights
          command: bash scripts/deploy_cloud_watch.sh << parameters.cluster >>
      - smoke-test-core-services:
          cluster: << parameters.cluster >>

workflows:
  version: 2

  lab-platform-eks-pipeline:
    jobs:
      # dev build
      - terraform/plan:
          name: sandbox-change-plan
          context: << pipeline.parameters.context >>
          shell: << pipeline.parameters.shell-options >>
          workspace: sandbox
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: sandbox
          after-terraform-init:
            - check-taint:
                node-group: group_a
                plan-or-apply: plan
          filters: *on-push-main

      - approve-sandbox-changes:
          type: approval
          requires:
            - sandbox-change-plan
          filters: *on-push-main

      - terraform/apply:
          name: apply-sandbox-changes
          context: << pipeline.parameters.context >>
          shell: << pipeline.parameters.shell-options >>
          workspace: sandbox
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: sandbox
          after-terraform-init:
            - check-taint:
                node-group: group_a
                plan-or-apply: apply
          after-terraform:
            - store-system-credentials:
                cluster: sandbox
          requires:
            - approve-sandbox-changes
          filters: *on-push-main

      - validate-eks:
          name: validate-sandbox-cluster
          context: << pipeline.parameters.context >>
          cluster: sandbox
          requires:
            - apply-sandbox-changes
          filters: *on-push-main

      - deploy-core-services:
          name: deploy-sandbox-core-services
          context: << pipeline.parameters.context >>
          cluster: sandbox
          requires:
            - apply-sandbox-changes
          filters: *on-push-main
